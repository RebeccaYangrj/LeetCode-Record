


class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        # build an empty, and we can return the initial position even though the position of printer went away feels like an initial printer
        dummy = ListNode(0)
        # build a printer to check every position 
        p = dummy
        # decimal base calculation after carry the next position number
        carry = 0
        
        # when l1 and l2 both exist
        while l1 and l2:
            #p.next need to be created as a listnode
            #l1 l2 are already listnode so to get the value need use the properties of the listnode class
            #when thinking, consider every position, from the initial digits and the tens hundreds            
            p.next = ListNode((l1.val+l2.val+carry)%10)
            carry = (l1.val + l2.val + carry)//10
            # move the old list l1, l2 and the new list to the new position
            l1 = l1.next
            l2 = l2.next
            p = p.next 
        
        # we have to use if l1 to determine if we need to do the while l1:
        if l1: 
            while l1:
                p.next = ListNode((l1.val + carry) %10)
                carry = (l1.val + carry) //10
                l1 = l1.next
                p = p.next            
        if l2: 
            while l2:
                p.next = ListNode((l2.val + carry) %10)
                carry = (l2.val + carry) //10
                l2 = l2.next
                p = p.next 
                
        if carry == 1:
            p.next  = ListNode(1)
            
        return dummy.next 
